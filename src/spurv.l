%{ 
#include <y.tab.hpp> 
#include <spurv_compiler.h> 
#include <implicit_ids.hpp> 
%} 
%option noyywrap 
%option array 
%option yylineno 
DIGIT [0-9] 
LETTER [a-zA-Z] 
ID_LETTER [a-zA-Z_.-] 
%%
[ \t\r\v] ; // Whitespace 
"//".*\n+ ; // Line comments 
\n+ {  return NEWLINE;} 
= {return EQUALS;} 

nop { return OpNop;}
undef { return OpUndef;}
source_continued { return OpSourceContinued;}
source { return OpSource;}
source_extension { return OpSourceExtension;}
name { return OpName;}
member_name { return OpMemberName;}
string { return OpString;}
line { return OpLine;}
no_line { return OpNoLine;}
decorate { return OpDecorate;}
member_decorate { return OpMemberDecorate;}
decoration_group { return OpDecorationGroup;}
group_decorate { return OpGroupDecorate;}
group_member_decorate { return OpGroupMemberDecorate;}
extension { return OpExtension;}
ext_inst_import { return OpExtInstImport;}
ext_inst { return OpExtInst;}
memory_model { return OpMemoryModel;}
entry_point { return OpEntryPoint;}
execution_mode { return OpExecutionMode;}
capability { return OpCapability;}
type_void { return OpTypeVoid;}
type_bool { return OpTypeBool;}
type_int { return OpTypeInt;}
type_float { return OpTypeFloat;}
type_vector { return OpTypeVector;}
type_matrix { return OpTypeMatrix;}
type_sampler { return OpTypeSampler;}
type_sampled_image { return OpTypeSampledImage;}
type_array { return OpTypeArray;}
type_runtime_array { return OpTypeRuntimeArray;}
type_struct { return OpTypeStruct;}
type_opaque { return OpTypeOpaque;}
type_pointer { return OpTypePointer;}
type_function { return OpTypeFunction;}
type_event { return OpTypeEvent;}
type_device_event { return OpTypeDeviceEvent;}
type_reserve_id { return OpTypeReserveId;}
type_queue { return OpTypeQueue;}
type_pipe { return OpTypePipe;}
type_forward_pointer { return OpTypeForwardPointer;}
constant_true { return OpConstantTrue;}
constant_false { return OpConstantFalse;}
constant { return OpConstant;}
constant_composite { return OpConstantComposite;}
constant_sampler { return OpConstantSampler;}
constant_null { return OpConstantNull;}
spec_constant_true { return OpSpecConstantTrue;}
spec_constant_false { return OpSpecConstantFalse;}
spec_constant { return OpSpecConstant;}
spec_constant_composite { return OpSpecConstantComposite;}
spec_constant_op { return OpSpecConstantOp;}
variable { return OpVariable;}
image_texel_pointer { return OpImageTexelPointer;}
load { return OpLoad;}
store { return OpStore;}
copy_memory { return OpCopyMemory;}
copy_memory_sized { return OpCopyMemorySized;}
access_chain { return OpAccessChain;}
in_bounds_access_chain { return OpInBoundsAccessChain;}
ptr_access_chain { return OpPtrAccessChain;}
array_length { return OpArrayLength;}
generic_ptr_mem_semantics { return OpGenericPtrMemSemantics;}
in_bounds_ptr_access_chain { return OpInBoundsPtrAccessChain;}
function { return OpFunction;}
function_parameter { return OpFunctionParameter;}
function_end { return OpFunctionEnd;}
function_call { return OpFunctionCall;}
sampled_image { return OpSampledImage;}
image_sample_implicit_lod { return OpImageSampleImplicitLod;}
image_sample_explicit_lod { return OpImageSampleExplicitLod;}
image_sample_dref_implicit_lod { return OpImageSampleDrefImplicitLod;}
image_sample_dref_explicit_lod { return OpImageSampleDrefExplicitLod;}
image_sample_proj_implicit_lod { return OpImageSampleProjImplicitLod;}
image_sample_proj_explicit_lod { return OpImageSampleProjExplicitLod;}
image_sample_proj_dref_implicit_lod { return OpImageSampleProjDrefImplicitLod;}
image_sample_proj_dref_explicit_lod { return OpImageSampleProjDrefExplicitLod;}
image_fetch { return OpImageFetch;}
image_gather { return OpImageGather;}
image_dref_gather { return OpImageDrefGather;}
image_read { return OpImageRead;}
image_write { return OpImageWrite;}
image { return OpImage;}
image_query_format { return OpImageQueryFormat;}
image_query_order { return OpImageQueryOrder;}
image_query_size_lod { return OpImageQuerySizeLod;}
image_query_size { return OpImageQuerySize;}
image_query_lod { return OpImageQueryLod;}
image_query_levels { return OpImageQueryLevels;}
image_query_samples { return OpImageQuerySamples;}
image_sparse_sample_implicit_lod { return OpImageSparseSampleImplicitLod;}
image_sparse_sample_explicit_lod { return OpImageSparseSampleExplicitLod;}
image_sparse_sample_dref_implicit_lod { return OpImageSparseSampleDrefImplicitLod;}
image_sparse_sample_dref_explicit_lod { return OpImageSparseSampleDrefExplicitLod;}
image_sparse_sample_proj_implicit_lod { return OpImageSparseSampleProjImplicitLod;}
image_sparse_sample_proj_explicit_lod { return OpImageSparseSampleProjExplicitLod;}
image_sparse_sample_proj_dref_implicit_lod { return OpImageSparseSampleProjDrefImplicitLod;}
image_sparse_sample_proj_dref_explicit_lod { return OpImageSparseSampleProjDrefExplicitLod;}
image_sparse_fetch { return OpImageSparseFetch;}
image_sparse_gather { return OpImageSparseGather;}
image_sparse_dref_gather { return OpImageSparseDrefGather;}
image_sparse_texels_resident { return OpImageSparseTexelsResident;}
image_sparse_read { return OpImageSparseRead;}
convert_f_to_U { return OpConvertFToU;}
convert_f_to_S { return OpConvertFToS;}
convert_s_to_F { return OpConvertSToF;}
convert_u_to_F { return OpConvertUToF;}
u_convert { return OpUConvert;}
s_convert { return OpSConvert;}
f_convert { return OpFConvert;}
quantize_to_f16 { return OpQuantizeToF16;}
convert_ptr_to_U { return OpConvertPtrToU;}
sat_convert_s_to_U { return OpSatConvertSToU;}
sat_convert_u_to_S { return OpSatConvertUToS;}
convert_u_to_ptr { return OpConvertUToPtr;}
ptr_cast_to_generic { return OpPtrCastToGeneric;}
generic_cast_to_ptr { return OpGenericCastToPtr;}
generic_cast_to_ptr_explicit { return OpGenericCastToPtrExplicit;}
bitcast { return OpBitcast;}
vector_extract_dynamic { return OpVectorExtractDynamic;}
vector_insert_dynamic { return OpVectorInsertDynamic;}
vector_shuffle { return OpVectorShuffle;}
composite_construct { return OpCompositeConstruct;}
composite_extract { return OpCompositeExtract;}
composite_insert { return OpCompositeInsert;}
copy_object { return OpCopyObject;}
transpose { return OpTranspose;}
s_negate { return OpSNegate;}
f_negate { return OpFNegate;}
i_add { return OpIAdd;}
f_add { return OpFAdd;}
i_sub { return OpISub;}
f_sub { return OpFSub;}
i_mul { return OpIMul;}
f_mul { return OpFMul;}
u_div { return OpUDiv;}
s_div { return OpSDiv;}
f_div { return OpFDiv;}
u_mod { return OpUMod;}
s_rem { return OpSRem;}
s_mod { return OpSMod;}
f_rem { return OpFRem;}
f_mod { return OpFMod;}
vector_times_scalar { return OpVectorTimesScalar;}
matrix_times_scalar { return OpMatrixTimesScalar;}
vector_times_matrix { return OpVectorTimesMatrix;}
matrix_times_vector { return OpMatrixTimesVector;}
matrix_times_matrix { return OpMatrixTimesMatrix;}
outer_product { return OpOuterProduct;}
dot { return OpDot;}
i_add_carry { return OpIAddCarry;}
i_sub_borrow { return OpISubBorrow;}
u_mul_extended { return OpUMulExtended;}
s_mul_extended { return OpSMulExtended;}
shift_right_logical { return OpShiftRightLogical;}
shift_right_arithmetic { return OpShiftRightArithmetic;}
shift_left_logical { return OpShiftLeftLogical;}
bitwise_or { return OpBitwiseOr;}
bitwise_xor { return OpBitwiseXor;}
bitwise_and { return OpBitwiseAnd;}
not { return OpNot;}
bit_field_insert { return OpBitFieldInsert;}
bit_field_s_extract { return OpBitFieldSExtract;}
bit_field_u_extract { return OpBitFieldUExtract;}
bit_reverse { return OpBitReverse;}
bit_count { return OpBitCount;}
any { return OpAny;}
all { return OpAll;}
is_nan { return OpIsNan;}
is_inf { return OpIsInf;}
is_finite { return OpIsFinite;}
is_normal { return OpIsNormal;}
sign_bit_set { return OpSignBitSet;}
less_or_greater { return OpLessOrGreater;}
ordered { return OpOrdered;}
unordered { return OpUnordered;}
logical_equal { return OpLogicalEqual;}
logical_not_equal { return OpLogicalNotEqual;}
logical_or { return OpLogicalOr;}
logical_and { return OpLogicalAnd;}
logical_not { return OpLogicalNot;}
select { return OpSelect;}
i_equal { return OpIEqual;}
i_not_equal { return OpINotEqual;}
u_greater_than { return OpUGreaterThan;}
s_greater_than { return OpSGreaterThan;}
u_greater_than_equal { return OpUGreaterThanEqual;}
s_greater_than_equal { return OpSGreaterThanEqual;}
u_less_than { return OpULessThan;}
s_less_than { return OpSLessThan;}
u_less_than_equal { return OpULessThanEqual;}
s_less_than_equal { return OpSLessThanEqual;}
f_ord_equal { return OpFOrdEqual;}
f_unord_equal { return OpFUnordEqual;}
f_ord_not_equal { return OpFOrdNotEqual;}
f_unord_not_equal { return OpFUnordNotEqual;}
f_ord_less_than { return OpFOrdLessThan;}
f_unord_less_than { return OpFUnordLessThan;}
f_ord_greater_than { return OpFOrdGreaterThan;}
f_unord_greater_than { return OpFUnordGreaterThan;}
f_ord_less_than_equal { return OpFOrdLessThanEqual;}
f_unord_less_than_equal { return OpFUnordLessThanEqual;}
f_ord_greater_than_equal { return OpFOrdGreaterThanEqual;}
f_unord_greater_than_equal { return OpFUnordGreaterThanEqual;}
d_pdx { return OpDPdx;}
d_pdy { return OpDPdy;}
fwidth { return OpFwidth;}
d_pdx_fine { return OpDPdxFine;}
d_pdy_fine { return OpDPdyFine;}
fwidth_fine { return OpFwidthFine;}
d_pdx_coarse { return OpDPdxCoarse;}
d_pdy_coarse { return OpDPdyCoarse;}
fwidth_coarse { return OpFwidthCoarse;}
phi { return OpPhi;}
loop_merge { return OpLoopMerge;}
selection_merge { return OpSelectionMerge;}
label { return OpLabel;}
branch { return OpBranch;}
branch_conditional { return OpBranchConditional;}
switch { return OpSwitch;}
return { return OpReturn;}
return_value { return OpReturnValue;}
unreachable { return OpUnreachable;}
lifetime_start { return OpLifetimeStart;}
lifetime_stop { return OpLifetimeStop;}
atomic_load { return OpAtomicLoad;}
atomic_store { return OpAtomicStore;}
atomic_exchange { return OpAtomicExchange;}
atomic_compare_exchange_weak { return OpAtomicCompareExchangeWeak;}
atomic_i_increment { return OpAtomicIIncrement;}
atomic_i_decrement { return OpAtomicIDecrement;}
atomic_i_add { return OpAtomicIAdd;}
atomic_i_sub { return OpAtomicISub;}
atomic_s_min { return OpAtomicSMin;}
atomic_u_min { return OpAtomicUMin;}
atomic_s_max { return OpAtomicSMax;}
atomic_u_max { return OpAtomicUMax;}
atomic_and { return OpAtomicAnd;}
atomic_or { return OpAtomicOr;}
atomic_xor { return OpAtomicXor;}
atomic_flag_test_and_set { return OpAtomicFlagTestAndSet;}
atomic_flag_clear { return OpAtomicFlagClear;}
emit_stream_vertex { return OpEmitStreamVertex;}
end_stream_primitive { return OpEndStreamPrimitive;}
control_barrier { return OpControlBarrier;}
memory_barrier { return OpMemoryBarrier;}
group_async_copy { return OpGroupAsyncCopy;}
group_wait_events { return OpGroupWaitEvents;}
group_all { return OpGroupAll;}
group_any { return OpGroupAny;}
group_broadcast { return OpGroupBroadcast;}
group_i_add { return OpGroupIAdd;}
group_f_add { return OpGroupFAdd;}
group_f_min { return OpGroupFMin;}
group_u_min { return OpGroupUMin;}
group_s_min { return OpGroupSMin;}
group_f_max { return OpGroupFMax;}
group_u_max { return OpGroupUMax;}
group_s_max { return OpGroupSMax;}
subgroup_ballot_KHR { return OpSubgroupBallotKHR;}
subgroup_first_invocation_KHR { return OpSubgroupFirstInvocationKHR;}
subgroup_read_invocation_KHR { return OpSubgroupReadInvocationKHR;}
group_i_add_non_uniform_AMD { return OpGroupIAddNonUniformAMD;}
group_f_add_non_uniform_AMD { return OpGroupFAddNonUniformAMD;}
group_f_min_non_uniform_AMD { return OpGroupFMinNonUniformAMD;}
group_u_min_non_uniform_AMD { return OpGroupUMinNonUniformAMD;}
group_s_min_non_uniform_AMD { return OpGroupSMinNonUniformAMD;}
group_f_max_non_uniform_AMD { return OpGroupFMaxNonUniformAMD;}
group_u_max_non_uniform_AMD { return OpGroupUMaxNonUniformAMD;}
group_s_max_non_uniform_AMD { return OpGroupSMaxNonUniformAMD;}
enqueue_marker { return OpEnqueueMarker;}
get_kernel_n_drange_sub_group_count { return OpGetKernelNDrangeSubGroupCount;}
get_kernel_n_drange_max_sub_group_size { return OpGetKernelNDrangeMaxSubGroupSize;}
get_kernel_work_group_size { return OpGetKernelWorkGroupSize;}
get_kernel_preferred_work_group_size_multiple { return OpGetKernelPreferredWorkGroupSizeMultiple;}
retain_event { return OpRetainEvent;}
release_event { return OpReleaseEvent;}
create_user_event { return OpCreateUserEvent;}
is_valid_event { return OpIsValidEvent;}
set_user_event_status { return OpSetUserEventStatus;}
capture_event_profiling_info { return OpCaptureEventProfilingInfo;}
get_default_queue { return OpGetDefaultQueue;}
build_n_d_range { return OpBuildNDRange;}
read_pipe { return OpReadPipe;}
write_pipe { return OpWritePipe;}
reserved_read_pipe { return OpReservedReadPipe;}
reserved_write_pipe { return OpReservedWritePipe;}
reserve_read_pipe_packets { return OpReserveReadPipePackets;}
reserve_write_pipe_packets { return OpReserveWritePipePackets;}
commit_read_pipe { return OpCommitReadPipe;}
commit_write_pipe { return OpCommitWritePipe;}
is_valid_reserve_id { return OpIsValidReserveId;}
get_num_pipe_packets { return OpGetNumPipePackets;}
get_max_pipe_packets { return OpGetMaxPipePackets;}
group_reserve_read_pipe_packets { return OpGroupReserveReadPipePackets;}
group_reserve_write_pipe_packets { return OpGroupReserveWritePipePackets;}
group_commit_read_pipe { return OpGroupCommitReadPipe;}
group_commit_write_pipe { return OpGroupCommitWritePipe;}



Unknown {  return E_Unknown;}
ESSL {  return E_ESSL;}
GLSL {  return E_GLSL;}
OpenCL_C {  return E_OpenCL_C;}
OpenCL_CPP {  return E_OpenCL_CPP;}
HLSL {  return E_HLSL;}
Vertex {  return E_Vertex;}
TessellationControl {  return E_TessellationControl;}
TessellationEvaluation {  return E_TessellationEvaluation;}
Geometry {  return E_Geometry;}
Fragment {  return E_Fragment;}
GLCompute {  return E_GLCompute;}
Kernel {  return E_Kernel;}
Logical {  return E_Logical;}
Physical32 {  return E_Physical32;}
Physical64 {  return E_Physical64;}
Simple {  return E_Simple;}
GLSL450 {  return E_GLSL450;}
OpenCL {  return E_OpenCL;}
Invocations {  return E_Invocations;}
SpacingEqual {  return E_SpacingEqual;}
SpacingFractionalEven {  return E_SpacingFractionalEven;}
SpacingFractionalOdd {  return E_SpacingFractionalOdd;}
VertexOrderCw {  return E_VertexOrderCw;}
VertexOrderCcw {  return E_VertexOrderCcw;}
PixelCenterInteger {  return E_PixelCenterInteger;}
OriginUpperLeft {  return E_OriginUpperLeft;}
OriginLowerLeft {  return E_OriginLowerLeft;}
EarlyFragmentTests {  return E_EarlyFragmentTests;}
PointMode {  return E_PointMode;}
Xfb {  return E_Xfb;}
DepthReplacing {  return E_DepthReplacing;}
DepthGreater {  return E_DepthGreater;}
DepthLess {  return E_DepthLess;}
DepthUnchanged {  return E_DepthUnchanged;}
LocalSize {  return E_LocalSize;}
LocalSizeHint {  return E_LocalSizeHint;}
InputPoints {  return E_InputPoints;}
InputLines {  return E_InputLines;}
InputLinesAdjacency {  return E_InputLinesAdjacency;}
Triangles {  return E_Triangles;}
InputTrianglesAdjacency {  return E_InputTrianglesAdjacency;}
Quads {  return E_Quads;}
Isolines {  return E_Isolines;}
OutputVertices {  return E_OutputVertices;}
OutputPoints {  return E_OutputPoints;}
OutputLineStrip {  return E_OutputLineStrip;}
OutputTriangleStrip {  return E_OutputTriangleStrip;}
VecTypeHint {  return E_VecTypeHint;}
ContractionOff {  return E_ContractionOff;}
Initializer {  return E_Initializer;}
Finalizer {  return E_Finalizer;}
SubgroupSize {  return E_SubgroupSize;}
SubgroupsPerWorkgroup {  return E_SubgroupsPerWorkgroup;}
SubgroupsPerWorkgroupId {  return E_SubgroupsPerWorkgroupId;}
LocalSizeId {  return E_LocalSizeId;}
LocalSizeHintId {  return E_LocalSizeHintId;}
PostDepthCoverage {  return E_PostDepthCoverage;}
StencilRefReplacingEXT {  return E_StencilRefReplacingEXT;}
UniformConstant {  return E_UniformConstant;}
Input {  return E_Input;}
Uniform {  return E_Uniform;}
Output {  return E_Output;}
Workgroup {  return E_Workgroup;}
CrossWorkgroup {  return E_CrossWorkgroup;}
Private {  return E_Private;}
Function {  return E_Function;}
Generic {  return E_Generic;}
PushConstant {  return E_PushConstant;}
AtomicCounter {  return E_AtomicCounter;}
Image {  return E_Image;}
StorageBuffer {  return E_StorageBuffer;}
1D {  return E_1D;}
2D {  return E_2D;}
3D {  return E_3D;}
Cube {  return E_Cube;}
Rect {  return E_Rect;}
Buffer {  return E_Buffer;}
SubpassData {  return E_SubpassData;}
None {  return E_None;}
ClampToEdge {  return E_ClampToEdge;}
Clamp {  return E_Clamp;}
Repeat {  return E_Repeat;}
RepeatMirrored {  return E_RepeatMirrored;}
Nearest {  return E_Nearest;}
Linear {  return E_Linear;}
Rgba32f {  return E_Rgba32f;}
Rgba16f {  return E_Rgba16f;}
R32f {  return E_R32f;}
Rgba8 {  return E_Rgba8;}
Rgba8Snorm {  return E_Rgba8Snorm;}
Rg32f {  return E_Rg32f;}
Rg16f {  return E_Rg16f;}
R11fG11fB10f {  return E_R11fG11fB10f;}
R16f {  return E_R16f;}
Rgba16 {  return E_Rgba16;}
Rgb10A2 {  return E_Rgb10A2;}
Rg16 {  return E_Rg16;}
Rg8 {  return E_Rg8;}
R16 {  return E_R16;}
R8 {  return E_R8;}
Rgba16Snorm {  return E_Rgba16Snorm;}
Rg16Snorm {  return E_Rg16Snorm;}
Rg8Snorm {  return E_Rg8Snorm;}
R16Snorm {  return E_R16Snorm;}
R8Snorm {  return E_R8Snorm;}
Rgba32i {  return E_Rgba32i;}
Rgba16i {  return E_Rgba16i;}
Rgba8i {  return E_Rgba8i;}
R32i {  return E_R32i;}
Rg32i {  return E_Rg32i;}
Rg16i {  return E_Rg16i;}
Rg8i {  return E_Rg8i;}
R16i {  return E_R16i;}
R8i {  return E_R8i;}
Rgba32ui {  return E_Rgba32ui;}
Rgba16ui {  return E_Rgba16ui;}
Rgba8ui {  return E_Rgba8ui;}
R32ui {  return E_R32ui;}
Rgb10a2ui {  return E_Rgb10a2ui;}
Rg32ui {  return E_Rg32ui;}
Rg16ui {  return E_Rg16ui;}
Rg8ui {  return E_Rg8ui;}
R16ui {  return E_R16ui;}
R8ui {  return E_R8ui;}
R {  return E_R;}
A {  return E_A;}
RG {  return E_RG;}
RA {  return E_RA;}
RGB {  return E_RGB;}
RGBA {  return E_RGBA;}
BGRA {  return E_BGRA;}
ARGB {  return E_ARGB;}
Intensity {  return E_Intensity;}
Luminance {  return E_Luminance;}
Rx {  return E_Rx;}
RGx {  return E_RGx;}
RGBx {  return E_RGBx;}
Depth {  return E_Depth;}
DepthStencil {  return E_DepthStencil;}
sRGB {  return E_sRGB;}
sRGBx {  return E_sRGBx;}
sRGBA {  return E_sRGBA;}
sBGRA {  return E_sBGRA;}
ABGR {  return E_ABGR;}
SnormInt8 {  return E_SnormInt8;}
SnormInt16 {  return E_SnormInt16;}
UnormInt8 {  return E_UnormInt8;}
UnormInt16 {  return E_UnormInt16;}
UnormShort565 {  return E_UnormShort565;}
UnormShort555 {  return E_UnormShort555;}
UnormInt101010 {  return E_UnormInt101010;}
SignedInt8 {  return E_SignedInt8;}
SignedInt16 {  return E_SignedInt16;}
SignedInt32 {  return E_SignedInt32;}
UnsignedInt8 {  return E_UnsignedInt8;}
UnsignedInt16 {  return E_UnsignedInt16;}
UnsignedInt32 {  return E_UnsignedInt32;}
HalfFloat {  return E_HalfFloat;}
Float {  return E_Float;}
UnormInt24 {  return E_UnormInt24;}
UnormInt101010_2 {  return E_UnormInt101010_2;}
Bias {  return E_Bias;}
Lod {  return E_Lod;}
Grad {  return E_Grad;}
ConstOffset {  return E_ConstOffset;}
Offset {  return E_Offset;}
ConstOffsets {  return E_ConstOffsets;}
Sample {  return E_Sample;}
MinLod {  return E_MinLod;}
NotNaN {  return E_NotNaN;}
NotInf {  return E_NotInf;}
NSZ {  return E_NSZ;}
AllowRecip {  return E_AllowRecip;}
Fast {  return E_Fast;}
RTE {  return E_RTE;}
RTZ {  return E_RTZ;}
RTP {  return E_RTP;}
RTN {  return E_RTN;}
Export {  return E_Export;}
Import {  return E_Import;}
ReadOnly {  return E_ReadOnly;}
WriteOnly {  return E_WriteOnly;}
ReadWrite {  return E_ReadWrite;}
Zext {  return E_Zext;}
Sext {  return E_Sext;}
ByVal {  return E_ByVal;}
Sret {  return E_Sret;}
NoAlias {  return E_NoAlias;}
NoCapture {  return E_NoCapture;}
NoWrite {  return E_NoWrite;}
NoReadWrite {  return E_NoReadWrite;}
RelaxedPrecision {  return E_RelaxedPrecision;}
SpecId {  return E_SpecId;}
Block {  return E_Block;}
BufferBlock {  return E_BufferBlock;}
RowMajor {  return E_RowMajor;}
ColMajor {  return E_ColMajor;}
ArrayStride {  return E_ArrayStride;}
MatrixStride {  return E_MatrixStride;}
GLSLShared {  return E_GLSLShared;}
GLSLPacked {  return E_GLSLPacked;}
CPacked {  return E_CPacked;}
BuiltIn {  return E_BuiltIn;}
NoPerspective {  return E_NoPerspective;}
Flat {  return E_Flat;}
Patch {  return E_Patch;}
Centroid {  return E_Centroid;}
Invariant {  return E_Invariant;}
Restrict {  return E_Restrict;}
Aliased {  return E_Aliased;}
Volatile {  return E_Volatile;}
Constant {  return E_Constant;}
Coherent {  return E_Coherent;}
NonWritable {  return E_NonWritable;}
NonReadable {  return E_NonReadable;}
SaturatedConversion {  return E_SaturatedConversion;}
Stream {  return E_Stream;}
Location {  return E_Location;}
Component {  return E_Component;}
Index {  return E_Index;}
Binding {  return E_Binding;}
DescriptorSet {  return E_DescriptorSet;}
XfbBuffer {  return E_XfbBuffer;}
XfbStride {  return E_XfbStride;}
FuncParamAttr {  return E_FuncParamAttr;}
FPRoundingMode {  return E_FPRoundingMode;}
FPFastMathMode {  return E_FPFastMathMode;}
LinkageAttributes {  return E_LinkageAttributes;}
NoContraction {  return E_NoContraction;}
InputAttachmentIndex {  return E_InputAttachmentIndex;}
Alignment {  return E_Alignment;}
MaxByteOffset {  return E_MaxByteOffset;}
AlignmentId {  return E_AlignmentId;}
MaxByteOffsetId {  return E_MaxByteOffsetId;}
ExplicitInterpAMD {  return E_ExplicitInterpAMD;}
OverrideCoverageNV {  return E_OverrideCoverageNV;}
PassthroughNV {  return E_PassthroughNV;}
ViewportRelativeNV {  return E_ViewportRelativeNV;}
SecondaryViewportRelativeNV {  return E_SecondaryViewportRelativeNV;}
NonUniformEXT {  return E_NonUniformEXT;}
HlslCounterBufferGOOGLE {  return E_HlslCounterBufferGOOGLE;}
HlslSemanticGOOGLE {  return E_HlslSemanticGOOGLE;}
Position {  return E_Position;}
PointSize {  return E_PointSize;}
ClipDistance {  return E_ClipDistance;}
CullDistance {  return E_CullDistance;}
VertexId {  return E_VertexId;}
InstanceId {  return E_InstanceId;}
PrimitiveId {  return E_PrimitiveId;}
InvocationId {  return E_InvocationId;}
Layer {  return E_Layer;}
ViewportIndex {  return E_ViewportIndex;}
TessLevelOuter {  return E_TessLevelOuter;}
TessLevelInner {  return E_TessLevelInner;}
TessCoord {  return E_TessCoord;}
PatchVertices {  return E_PatchVertices;}
FragCoord {  return E_FragCoord;}
PointCoord {  return E_PointCoord;}
FrontFacing {  return E_FrontFacing;}
SampleId {  return E_SampleId;}
SamplePosition {  return E_SamplePosition;}
SampleMask {  return E_SampleMask;}
FragDepth {  return E_FragDepth;}
HelperInvocation {  return E_HelperInvocation;}
NumWorkgroups {  return E_NumWorkgroups;}
WorkgroupSize {  return E_WorkgroupSize;}
WorkgroupId {  return E_WorkgroupId;}
LocalInvocationId {  return E_LocalInvocationId;}
GlobalInvocationId {  return E_GlobalInvocationId;}
LocalInvocationIndex {  return E_LocalInvocationIndex;}
WorkDim {  return E_WorkDim;}
GlobalSize {  return E_GlobalSize;}
EnqueuedWorkgroupSize {  return E_EnqueuedWorkgroupSize;}
GlobalOffset {  return E_GlobalOffset;}
GlobalLinearId {  return E_GlobalLinearId;}
SubgroupMaxSize {  return E_SubgroupMaxSize;}
NumSubgroups {  return E_NumSubgroups;}
NumEnqueuedSubgroups {  return E_NumEnqueuedSubgroups;}
SubgroupId {  return E_SubgroupId;}
SubgroupLocalInvocationId {  return E_SubgroupLocalInvocationId;}
VertexIndex {  return E_VertexIndex;}
InstanceIndex {  return E_InstanceIndex;}
SubgroupEqMask {  return E_SubgroupEqMask;}
SubgroupGeMask {  return E_SubgroupGeMask;}
SubgroupGtMask {  return E_SubgroupGtMask;}
SubgroupLeMask {  return E_SubgroupLeMask;}
SubgroupLtMask {  return E_SubgroupLtMask;}
SubgroupEqMaskKHR {  return E_SubgroupEqMaskKHR;}
SubgroupGeMaskKHR {  return E_SubgroupGeMaskKHR;}
SubgroupGtMaskKHR {  return E_SubgroupGtMaskKHR;}
SubgroupLeMaskKHR {  return E_SubgroupLeMaskKHR;}
SubgroupLtMaskKHR {  return E_SubgroupLtMaskKHR;}
BaseVertex {  return E_BaseVertex;}
BaseInstance {  return E_BaseInstance;}
DrawIndex {  return E_DrawIndex;}
DeviceIndex {  return E_DeviceIndex;}
ViewIndex {  return E_ViewIndex;}
BaryCoordNoPerspAMD {  return E_BaryCoordNoPerspAMD;}
BaryCoordNoPerspCentroidAMD {  return E_BaryCoordNoPerspCentroidAMD;}
BaryCoordNoPerspSampleAMD {  return E_BaryCoordNoPerspSampleAMD;}
BaryCoordSmoothAMD {  return E_BaryCoordSmoothAMD;}
BaryCoordSmoothCentroidAMD {  return E_BaryCoordSmoothCentroidAMD;}
BaryCoordSmoothSampleAMD {  return E_BaryCoordSmoothSampleAMD;}
BaryCoordPullModelAMD {  return E_BaryCoordPullModelAMD;}
FragStencilRefEXT {  return E_FragStencilRefEXT;}
ViewportMaskNV {  return E_ViewportMaskNV;}
SecondaryPositionNV {  return E_SecondaryPositionNV;}
SecondaryViewportMaskNV {  return E_SecondaryViewportMaskNV;}
PositionPerViewNV {  return E_PositionPerViewNV;}
ViewportMaskPerViewNV {  return E_ViewportMaskPerViewNV;}
FullyCoveredEXT {  return E_FullyCoveredEXT;}
Flatten {  return E_Flatten;}
DontFlatten {  return E_DontFlatten;}
Unroll {  return E_Unroll;}
DontUnroll {  return E_DontUnroll;}
DependencyInfinite {  return E_DependencyInfinite;}
DependencyLength {  return E_DependencyLength;}
Inline {  return E_Inline;}
DontInline {  return E_DontInline;}
Pure {  return E_Pure;}
Const {  return E_Const;}
Acquire {  return E_Acquire;}
Release {  return E_Release;}
AcquireRelease {  return E_AcquireRelease;}
SequentiallyConsistent {  return E_SequentiallyConsistent;}
UniformMemory {  return E_UniformMemory;}
SubgroupMemory {  return E_SubgroupMemory;}
WorkgroupMemory {  return E_WorkgroupMemory;}
CrossWorkgroupMemory {  return E_CrossWorkgroupMemory;}
AtomicCounterMemory {  return E_AtomicCounterMemory;}
ImageMemory {  return E_ImageMemory;}
Aligned {  return E_Aligned;}
Nontemporal {  return E_Nontemporal;}
CrossDevice {  return E_CrossDevice;}
Device {  return E_Device;}
Subgroup {  return E_Subgroup;}
Invocation {  return E_Invocation;}
Reduce {  return E_Reduce;}
InclusiveScan {  return E_InclusiveScan;}
ExclusiveScan {  return E_ExclusiveScan;}
ClusteredReduce {  return E_ClusteredReduce;}
PartitionedReduceNV {  return E_PartitionedReduceNV;}
PartitionedInclusiveScanNV {  return E_PartitionedInclusiveScanNV;}
PartitionedExclusiveScanNV {  return E_PartitionedExclusiveScanNV;}
NoWait {  return E_NoWait;}
WaitKernel {  return E_WaitKernel;}
WaitWorkGroup {  return E_WaitWorkGroup;}
CmdExecTime {  return E_CmdExecTime;}
Matrix {  return E_Matrix;}
Shader {  return E_Shader;}
Tessellation {  return E_Tessellation;}
Addresses {  return E_Addresses;}
Linkage {  return E_Linkage;}
Vector16 {  return E_Vector16;}
Float16Buffer {  return E_Float16Buffer;}
Float16 {  return E_Float16;}
Float64 {  return E_Float64;}
Int64 {  return E_Int64;}
Int64Atomics {  return E_Int64Atomics;}
ImageBasic {  return E_ImageBasic;}
ImageReadWrite {  return E_ImageReadWrite;}
ImageMipmap {  return E_ImageMipmap;}
Pipes {  return E_Pipes;}
Groups {  return E_Groups;}
DeviceEnqueue {  return E_DeviceEnqueue;}
LiteralSampler {  return E_LiteralSampler;}
AtomicStorage {  return E_AtomicStorage;}
Int16 {  return E_Int16;}
TessellationPointSize {  return E_TessellationPointSize;}
GeometryPointSize {  return E_GeometryPointSize;}
ImageGatherExtended {  return E_ImageGatherExtended;}
StorageImageMultisample {  return E_StorageImageMultisample;}
UniformBufferArrayDynamicIndexing {  return E_UniformBufferArrayDynamicIndexing;}
SampledImageArrayDynamicIndexing {  return E_SampledImageArrayDynamicIndexing;}
StorageBufferArrayDynamicIndexing {  return E_StorageBufferArrayDynamicIndexing;}
StorageImageArrayDynamicIndexing {  return E_StorageImageArrayDynamicIndexing;}
ImageCubeArray {  return E_ImageCubeArray;}
SampleRateShading {  return E_SampleRateShading;}
ImageRect {  return E_ImageRect;}
SampledRect {  return E_SampledRect;}
GenericPointer {  return E_GenericPointer;}
Int8 {  return E_Int8;}
InputAttachment {  return E_InputAttachment;}
SparseResidency {  return E_SparseResidency;}
Sampled1D {  return E_Sampled1D;}
Image1D {  return E_Image1D;}
SampledCubeArray {  return E_SampledCubeArray;}
SampledBuffer {  return E_SampledBuffer;}
ImageBuffer {  return E_ImageBuffer;}
ImageMSArray {  return E_ImageMSArray;}
StorageImageExtendedFormats {  return E_StorageImageExtendedFormats;}
ImageQuery {  return E_ImageQuery;}
DerivativeControl {  return E_DerivativeControl;}
InterpolationFunction {  return E_InterpolationFunction;}
TransformFeedback {  return E_TransformFeedback;}
GeometryStreams {  return E_GeometryStreams;}
StorageImageReadWithoutFormat {  return E_StorageImageReadWithoutFormat;}
StorageImageWriteWithoutFormat {  return E_StorageImageWriteWithoutFormat;}
MultiViewport {  return E_MultiViewport;}
SubgroupDispatch {  return E_SubgroupDispatch;}
NamedBarrier {  return E_NamedBarrier;}
PipeStorage {  return E_PipeStorage;}
GroupNonUniform {  return E_GroupNonUniform;}
GroupNonUniformVote {  return E_GroupNonUniformVote;}
GroupNonUniformArithmetic {  return E_GroupNonUniformArithmetic;}
GroupNonUniformBallot {  return E_GroupNonUniformBallot;}
GroupNonUniformShuffle {  return E_GroupNonUniformShuffle;}
GroupNonUniformShuffleRelative {  return E_GroupNonUniformShuffleRelative;}
GroupNonUniformClustered {  return E_GroupNonUniformClustered;}
GroupNonUniformQuad {  return E_GroupNonUniformQuad;}
SubgroupBallotKHR {  return E_SubgroupBallotKHR;}
DrawParameters {  return E_DrawParameters;}
SubgroupVoteKHR {  return E_SubgroupVoteKHR;}
StorageBuffer16BitAccess {  return E_StorageBuffer16BitAccess;}
StorageUniformBufferBlock16 {  return E_StorageUniformBufferBlock16;}
UniformAndStorageBuffer16BitAccess {  return E_UniformAndStorageBuffer16BitAccess;}
StorageUniform16 {  return E_StorageUniform16;}
StoragePushConstant16 {  return E_StoragePushConstant16;}
StorageInputOutput16 {  return E_StorageInputOutput16;}
DeviceGroup {  return E_DeviceGroup;}
MultiView {  return E_MultiView;}
VariablePointersStorageBuffer {  return E_VariablePointersStorageBuffer;}
VariablePointers {  return E_VariablePointers;}
AtomicStorageOps {  return E_AtomicStorageOps;}
SampleMaskPostDepthCoverage {  return E_SampleMaskPostDepthCoverage;}
Float16ImageAMD {  return E_Float16ImageAMD;}
ImageGatherBiasLodAMD {  return E_ImageGatherBiasLodAMD;}
FragmentMaskAMD {  return E_FragmentMaskAMD;}
StencilExportEXT {  return E_StencilExportEXT;}
ImageReadWriteLodAMD {  return E_ImageReadWriteLodAMD;}
SampleMaskOverrideCoverageNV {  return E_SampleMaskOverrideCoverageNV;}
GeometryShaderPassthroughNV {  return E_GeometryShaderPassthroughNV;}
ShaderViewportIndexLayerEXT {  return E_ShaderViewportIndexLayerEXT;}
ShaderViewportIndexLayerNV {  return E_ShaderViewportIndexLayerNV;}
ShaderViewportMaskNV {  return E_ShaderViewportMaskNV;}
ShaderStereoViewNV {  return E_ShaderStereoViewNV;}
PerViewAttributesNV {  return E_PerViewAttributesNV;}
FragmentFullyCoveredEXT {  return E_FragmentFullyCoveredEXT;}
ShaderNonUniformEXT {  return E_ShaderNonUniformEXT;}
RuntimeDescriptorArrayEXT {  return E_RuntimeDescriptorArrayEXT;}
InputAttachmentArrayDynamicIndexingEXT {  return E_InputAttachmentArrayDynamicIndexingEXT;}
UniformTexelBufferArrayDynamicIndexingEXT {  return E_UniformTexelBufferArrayDynamicIndexingEXT;}
StorageTexelBufferArrayDynamicIndexingEXT {  return E_StorageTexelBufferArrayDynamicIndexingEXT;}
UniformBufferArrayNonUniformIndexingEXT {  return E_UniformBufferArrayNonUniformIndexingEXT;}
SampledImageArrayNonUniformIndexingEXT {  return E_SampledImageArrayNonUniformIndexingEXT;}
StorageBufferArrayNonUniformIndexingEXT {  return E_StorageBufferArrayNonUniformIndexingEXT;}
StorageImageArrayNonUniformIndexingEXT {  return E_StorageImageArrayNonUniformIndexingEXT;}
InputAttachmentArrayNonUniformIndexingEXT {  return E_InputAttachmentArrayNonUniformIndexingEXT;}
UniformTexelBufferArrayNonUniformIndexingEXT {  return E_UniformTexelBufferArrayNonUniformIndexingEXT;}
StorageTexelBufferArrayNonUniformIndexingEXT {  return E_StorageTexelBufferArrayNonUniformIndexingEXT;}
SubgroupShuffleINTEL {  return E_SubgroupShuffleINTEL;}
SubgroupBufferBlockIOINTEL {  return E_SubgroupBufferBlockIOINTEL;}
SubgroupImageBlockIOINTEL {  return E_SubgroupImageBlockIOINTEL;}
GroupNonUniformPartitionedNV {  return E_GroupNonUniformPartitionedNV;}
Round {  return E_Round;}
RoundEven {  return E_RoundEven;}
Trunc {  return E_Trunc;}
FAbs {  return E_FAbs;}
SAbs {  return E_SAbs;}
FSign {  return E_FSign;}
SSign {  return E_SSign;}
Floor {  return E_Floor;}
Ceil {  return E_Ceil;}
Fract {  return E_Fract;}
Radians {  return E_Radians;}
Degrees {  return E_Degrees;}
Sin {  return E_Sin;}
Cos {  return E_Cos;}
Tan {  return E_Tan;}
Asin {  return E_Asin;}
Acos {  return E_Acos;}
Atan {  return E_Atan;}
Sinh {  return E_Sinh;}
Cosh {  return E_Cosh;}
Tanh {  return E_Tanh;}
Asinh {  return E_Asinh;}
Acosh {  return E_Acosh;}
Atanh {  return E_Atanh;}
Atan2 {  return E_Atan2;}
Pow {  return E_Pow;}
Exp {  return E_Exp;}
Log {  return E_Log;}
Exp2 {  return E_Exp2;}
Log2 {  return E_Log2;}
Sqrt {  return E_Sqrt;}
InverseSqrt {  return E_InverseSqrt;}
Determinant {  return E_Determinant;}
MatrixInverse {  return E_MatrixInverse;}
Modf {  return E_Modf;}
ModfStruct {  return E_ModfStruct;}
FMin {  return E_FMin;}
UMin {  return E_UMin;}
SMin {  return E_SMin;}
FMax {  return E_FMax;}
UMax {  return E_UMax;}
SMax {  return E_SMax;}
FClamp {  return E_FClamp;}
UClamp {  return E_UClamp;}
SClamp {  return E_SClamp;}
FMix {  return E_FMix;}
Step {  return E_Step;}
SmoothStep {  return E_SmoothStep;}
Fma {  return E_Fma;}
Frexp {  return E_Frexp;}
FrexpStruct {  return E_FrexpStruct;}
Ldexp {  return E_Ldexp;}
PackSnorm4x8 {  return E_PackSnorm4x8;}
PackUnorm4x8 {  return E_PackUnorm4x8;}
PackSnorm2x16 {  return E_PackSnorm2x16;}
PackUnorm2x16 {  return E_PackUnorm2x16;}
PackHalf2x16 {  return E_PackHalf2x16;}
PackDouble2x32 {  return E_PackDouble2x32;}
UnpackSnorm2x16 {  return E_UnpackSnorm2x16;}
UnpackUnorm2x16 {  return E_UnpackUnorm2x16;}
UnpackHalf2x16 {  return E_UnpackHalf2x16;}
UnpackSnorm4x8 {  return E_UnpackSnorm4x8;}
UnpackUnorm4x8 {  return E_UnpackUnorm4x8;}
UnpackDouble2x32 {  return E_UnpackDouble2x32;}
Length {  return E_Length;}
Distance {  return E_Distance;}
Cross {  return E_Cross;}
Normalize {  return E_Normalize;}
FaceForward {  return E_FaceForward;}
Reflect {  return E_Reflect;}
Refract {  return E_Refract;}
FindILsb {  return E_FindILsb;}
FindSMsb {  return E_FindSMsb;}
FindUMsb {  return E_FindUMsb;}
InterpolateAtCentroid {  return E_InterpolateAtCentroid;}
InterpolateAtSample {  return E_InterpolateAtSample;}
InterpolateAtOffset {  return E_InterpolateAtOffset;}
NMin {  return E_NMin;}
NMax {  return E_NMax;}
NClamp {  return E_NClamp;}



{DIGIT}+  { return NUMBER;} 
\"(\\.|[^\\"])*\" { return STRING;} 
#header {return HEADER_KEYWORD;} 
(#out|#in) {return HEADER_IO_KEYWORD;} 
(#uniform) {return HEADER_UNIFORM_KEYWORD;} 
(VERTEX_SHADER|FRAGMENT_SHADER|COMPUTE_SHADER) {return HEADER_CLASS;} 
{ID_LETTER}({ID_LETTER}|{DIGIT})* { return IDENTIFIER;} 
.  { 
    fprintf(stderr, "Unrecognized token %s\n", yytext); 
    exit(-1); 
   } 
%%
